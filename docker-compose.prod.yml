services:
  db:
    image: mysql:8.0
    container_name: strapi-db-prod
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_PASSWORD}
      MYSQL_DATABASE: strapi
      MYSQL_USER: strapi
      MYSQL_PASSWORD: ${DB_PASSWORD}
    volumes:
      - .tmp/mysql:/var/lib/mysql
    # Proper SSL configuration for database
    command: >
      --default-authentication-plugin=mysql_native_password
      --require_secure_transport=OFF
      --ssl=OFF
    ports:
      - '3306:3306'
    networks:
      - strapi-network
      
  cms:
    build: 
      context: ./apps/cms
      dockerfile: Dockerfile.prod
    container_name: strapi-cms-prod
    restart: unless-stopped
    environment:
      NODE_ENV: production
      HOST: 0.0.0.0
      PORT: 1337
      DATABASE_CLIENT: mysql
      DATABASE_HOST: db
      DATABASE_PORT: 3306
      DATABASE_NAME: strapi
      DATABASE_USERNAME: strapi
      DATABASE_PASSWORD: ${DB_PASSWORD}
      # SSL Configuration
      HTTPS_ENABLED: "false"
      # Only disable SSL verification in development
      NODE_TLS_REJECT_UNAUTHORIZED: ${NODE_TLS_REJECT_UNAUTHORIZED:-"true"}
    volumes:
      - ./apps/cms:/app
      - /app/node_modules
      - ./apps/cms/public/uploads:/app/public/uploads
    ports:
      - '1337:1337'
    depends_on:
      - db
    networks:
      - strapi-network
    # Health check
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:1337/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Nginx reverse proxy for production SSL termination
  nginx:
    image: nginx:alpine
    container_name: strapi-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - cms
    networks:
      - strapi-network

networks:
  strapi-network:
    driver: bridge

volumes:
  mysql_data: